<%# The email which is sent when someone comments on a commit. It can display multiple comments if we've
  # batched more than one comment together before sending the notification email.
  #  - commit
  #  - comments_by_file: a hash of file_name => [comments]
  #  - diffs_by_file: A hash of tagged diffs generated by GitHelper.get_tagged_commit_diff,
  #    grouped by filename.
  #
  # TODO(philc): If there are multiple comments which span the same diff hunk, this does not merge those
  # diff hunks together -- each comment will have the full diff hunk included around it, which means the same
  # diff hunk may appear multiple times in the email.
  # TODO(philc): Make each comment a deep-link back to the diff view.
%>

<font face="monospace" size="3">

<% commit_url = "http://#{BARKEEP_HOSTNAME}/commits/#{commit.git_repo.name}/#{commit.sha}" %>
<a href="<%= commit_url %>"><%= commit.grit_commit.id_abbrev %></a>
<%= CGI.escape_html(commit.grit_commit.author.display_string) %>
 <%= StringHelper.short_date(commit.grit_commit.date) %><br/>
<%= CGI.escape_html(commit.grit_commit.short_message) %><br/>

<br/><br/>

<% unless general_comments.empty? %>
  <% title = "General comments" %>
  <%= title %><br/>
  <%= "-" * title.size %><br/>

  <% general_comments.each do |comment| %>
    &lt;<b><a href="<%= "#{commit_url}#comment-#{comment.id}" %>"><%= CGI.escape_html(comment.user.name) %></a></b>&gt;
    <span style='background-color: #eef'><%= CGI.escape_html(comment.text) %></span><br/><br/>
  <% end  %>
<% end %>

<% comments_by_file.each do |filename, comments| %>
  <%= filename %><br/>
  <%= "-" * filename.size %><br/>

  <pre><%=
    comments_by_line_number = comments.group_by(&:line_number)
    comments_by_line_number.map do |line_number, comments|
      lines_of_context = 4

      lines = diffs_by_file[filename].lines
      lines_before = lines[[line_number - lines_of_context, 0].max, lines_of_context]
      lines_after = lines[line_number, lines_of_context]

      # Do this so there isn't useless whitespace surrounding the diff.
      lines_before = strip_unchanged_blank_lines(lines_before)
      lines_after = strip_unchanged_blank_lines(lines_after)

      # If all of the lines in the diff have some similar amount of leading whitespace, unindent each line
      # so the diff isn't so far indented.
      non_empty_lines = (lines_before + lines_after).map(&:data).reject { |content| content.strip.blank? }
      leading_whitespace = non_empty_lines.map { |content| content.index(/\S/) }.min || 0
      trim_leading_whitespace = Proc.new { |line| line[leading_whitespace..-1] || "" }

      output = lines_before.map do |line_diff|
        line_diff.line_prefix + CGI.escape_html(trim_leading_whitespace.call(line_diff.data))
      end

      output << ""
      # If there are multiple comments discussing the same line of code, place them right next to each other.
      comments.each do |comment|
        output << "&lt;<b><a href='#{commit_url}#comment-#{comment.id}' target='_blank'>" +
            "#{CGI.escape_html(comment.user.name)}</a></b>&gt; " +
            "<span style='background-color: #eef'>#{CGI.escape_html(comment.text)}</span>"
      end
      output << ""

      output += lines_after.map do |line_diff|
        line_diff.line_prefix + CGI.escape_html(trim_leading_whitespace.call(line_diff.data))
      end
      output.join("\n")
    end.join("\n\n\n")
  %></pre>
<% end %>
</font>
--<br/>
You're receiving this email because you've commented on this commit before, or you have a saved search which includes this commit.
